package net.xiaoyu233.classkit.util.natives.loopback_capture;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * JNA Wrapper for library <b>LoopbackCapture</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
class LoopbackCaptureLibrary implements Library {
    public static final String JNA_LIBRARY_NAME = "LoopbackCapture";
    public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LoopbackCaptureLibrary.JNA_LIBRARY_NAME);
    static {
        Native.register(LoopbackCaptureLibrary.class, LoopbackCaptureLibrary.JNA_NATIVE_LIB);
    }
    public static class AudioData extends Structure {
        /** C type : BYTE* */
        public Pointer data;
        public int length;
        public byte released;
        public AudioData() {
            super();
        }
        protected List<String> getFieldOrder() {
            return Arrays.asList("data", "length", "released");
        }
        /** @param data C type : BYTE* */
        public AudioData(Pointer data, int length, byte released) {
            super();
            this.data = data;
            this.length = length;
            this.released = released;
        }
        public AudioData(Pointer peer) {
            super(peer);
        }
        public static class ByReference extends AudioData implements Structure.ByReference {

        };
        public static class ByValue extends AudioData implements Structure.ByValue {

        };
    };
    /**
     * Original signature : <code>CLoopbackCapture* CreateCaptureClient()</code><br>
     * <i>native declaration : line 16</i>
     */
    public static native LoopbackCaptureLibrary.CLoopbackCapture CreateCaptureClient();
    /**
     * Original signature : <code>HRESULT StartCaptureAsync(CLoopbackCapture*, DWORD, bool)</code><br>
     * <i>native declaration : line 17</i>
     */
    public static native LoopbackCaptureLibrary.HRESULT StartCaptureAsync(LoopbackCaptureLibrary.CLoopbackCapture captureClient, int pid, byte includeProcessTree);
    /**
     * Original signature : <code>HRESULT StopCapture(CLoopbackCapture*)</code><br>
     * <i>native declaration : line 18</i>
     */
    public static native LoopbackCaptureLibrary.HRESULT StopCapture(LoopbackCaptureLibrary.CLoopbackCapture client);
    /**
     * Original signature : <code>AudioData* GetNextAudioData(CLoopbackCapture*)</code><br>
     * <i>native declaration : line 19</i>
     */
    public static native LoopbackCaptureLibrary.AudioData GetNextAudioData(LoopbackCaptureLibrary.CLoopbackCapture client);
    /**
     * Original signature : <code>bool IsRunning(CLoopbackCapture*)</code><br>
     * <i>native declaration : line 20</i>
     */
    public static native byte IsRunning(LoopbackCaptureLibrary.CLoopbackCapture client);
    /**
     * Original signature : <code>void ReleaseAudioData(AudioData*)</code><br>
     * <i>native declaration : line 21</i>
     */
    public static native void ReleaseAudioData(LoopbackCaptureLibrary.AudioData data);
    /**
     * Original signature : <code>void ReleaseClient(CLoopbackCapture*)</code><br>
     * <i>native declaration : line 22</i>
     */
    public static native void ReleaseClient(LoopbackCaptureLibrary.CLoopbackCapture client);
    /**
     * Original signature : <code>bool HasAudioData(CLoopbackCapture*)</code><br>
     * <i>native declaration : line 20</i>
     */
    public static native byte HasAudioData(LoopbackCaptureLibrary.CLoopbackCapture client);
    /**
     * Original signature : <code>void SetAudioFormat(CLoopbackCapture*, WORD, DWORD, WORD)</code><br>
     * <i>native declaration : line 21</i>
     */
    public static native void SetAudioFormat(LoopbackCaptureLibrary.CLoopbackCapture client, short channels, int sampleRate, short bitsPerSample);
    /**
     * Original signature : <code>int GetAvailableData(CLoopbackCapture*)</code><br>
     * <i>native declaration : line 22</i>
     */
    public static native int GetAvailableData(LoopbackCaptureLibrary.CLoopbackCapture client);
    public static class HRESULT extends PointerType {
        public HRESULT(Pointer address) {
            super(address);
        }
        public HRESULT() {
            super();
        }
    };
    public static class CLoopbackCapture extends PointerType {
        public CLoopbackCapture(Pointer address) {
            super(address);
        }
        public CLoopbackCapture() {
            super();
        }
    };
}
